# you must set worker processes based on your CPU cores, nginx does not benefit from setting more than that
# some last versions calculate it automatically
worker_processes auto; 

# number of file descriptors used for nginx
# the limit for the maximum FDs on the server is usually set by the OS.
# if you don't set FD's then OS settings will be used which is by default 2000
worker_rlimit_nofile 40000;

# only log critical errors
error_log /var/log/nginx/error.log crit;

events {
     # determines how much clients will be served per worker
    # max clients = worker_connections * worker_processes
    # max clients is also limited by the number of socket connections available on the system (~64k)
    worker_connections 8192;

    # optimized to serve many clients with each thread, essential for linux -- for testing environment
    use epoll;

    # accept as many connections as possible, may flood worker connections if set too low -- for testing environment
    multi_accept on;
}

http {
    # these settings allow SSO to send large data through GET HTTP verb
    proxy_buffer_size   128k;
    proxy_buffers   4 256k;
    proxy_busy_buffers_size   256k;
    large_client_header_buffers 4 16k;

    # cache informations about FDs, frequently accessed files
    # can boost performance, but you need to test those values
    
    open_file_cache max=200000 inactive=20s;
    open_file_cache_valid 30s;
    open_file_cache_min_uses 2;
    open_file_cache_errors on;

    # to boost I/O on HDD we can disable access logs
    # access_log off;

    # copies data between one FD and other from within the kernel
    # faster than read() + write()
    # sendfile on;

    # send headers in one piece, it is better than sending them one by one
    tcp_nopush on;

    # don't buffer data sent, good for small data bursts in real time
    tcp_nodelay on;

    # reduce the data that needs to be sent over network -- for testing environment
    gzip on;
    # gzip_static on;
    gzip_min_length 10240;
    gzip_comp_level 1;
    gzip_vary on;
    gzip_disable msie6;
    gzip_proxied expired no-cache no-store private auth;
    gzip_types
        # text/html is always compressed by HttpGzipModule
        text/css
        text/javascript
        text/xml
        text/plain
        text/x-component
        application/javascript
        application/x-javascript
        application/json
        application/xml
        application/rss+xml
        application/atom+xml
        font/truetype
        font/opentype
        application/vnd.ms-fontobject
        image/svg+xml;

    log_format  main_ext  '$remote_addr - $remote_user [$time_local] "$request" '
                            '$status $body_bytes_sent "$http_referer" '
                            '"$http_user_agent" "$http_x_forwarded_for" '
                            '"$host" sn="$server_name" '
                            'rt=$request_time '
                            'ua="$upstream_addr" us="$upstream_status" '
                            'ut="$upstream_response_time" ul="$upstream_response_length" '
                            'cs=$upstream_cache_status' ;

    # allow the server to close connection on non responding client, this will free up memory
    reset_timedout_connection on;

    # request timed out -- default 60
    client_body_timeout 10;

    # if client stop responding, free up memory -- default 60
    send_timeout 2;

    # server will close connection after this time -- default 75
    keepalive_timeout 30;

    # number of requests client can make over keep-alive -- for testing environment
    keepalive_requests 100000;

    # cache settings
    proxy_cache_path /var/www/cache levels=1:2 keys_zone=STATIC:10m max_size=1g inactive=60m use_temp_path=off;

    
    upstream auth-server {
        least_conn;
        # for LB scenarios
        server auth-server:5000;
        #server auth-server_02:80 max_fails=3 fail_timeout=30s;
        
    }
    server {
        listen 80 default_server;
        listen [::]:80 default_server;
        return 301 https://$host$request_uri;    
        
    server {
    listen 443 ssl http2 default_server;
    listen [::]:443 ssl default_server;

    ssl_certificate /etc/ssl/certs/cert.pem;
    ssl_certificate_key /etc/ssl/private/cert.key ;

   location / {
        proxy_pass http://auth-server;
        proxy_set_header Host $host;
    }
}